//Simple C program to encrypt and decrypt a string

#include <stdio.h>

int main()
{
   int i, x;
   char str[100];

   printf("\nPlease enter a string:\t");
   gets(str);

   printf("\nPlease choose following options:\n");
   printf("1 = Encrypt the string.\n");
   printf("2 = Decrypt the string.\n");
   scanf("%d", &x);

   //using switch case statements
   switch(x)
   {
   case 1:
      for(i = 0; (i < 100 && str[i] != '\0'); i++)
        str[i] = str[i] + 3; //the key for encryption is 3 that is added to ASCII value

      printf("\nEncrypted string: %s\n", str);
      break;

   case 2:
      for(i = 0; (i < 100 && str[i] != '\0'); i++)
        str[i] = str[i] - 3; //the key for encryption is 3 that is subtracted to ASCII value

      printf("\nDecrypted string: %s\n", str);
      break;

   default:
      printf("\nError\n");
   }
   return 0;
}






.LC0:
        .ascii  "\012Please enter a string:\011\000"
.LC1:
        .ascii  "\012Please choose following options:\000"
.LC2:
        .ascii  "1 = Encrypt the string.\000"
.LC3:
        .ascii  "2 = Decrypt the string.\000"
.LC4:
        .ascii  "%d\000"
.LC5:
        .ascii  "\012Encrypted string: %s\012\000"
.LC6:
        .ascii  "\012Decrypted string: %s\012\000"
.LC7:
        .ascii  "\012Error\000"
main:
        stmfd   sp!, {fp, lr}
        add     fp, sp, #4
        sub     sp, sp, #112
        ldr     r3, .L13
        mov     r0, r3
        bl      printf
        sub     r3, fp, #112
        mov     r0, r3
        bl      gets
        ldr     r0, .L13+4
        bl      puts
        ldr     r0, .L13+8
        bl      puts
        ldr     r0, .L13+12
        bl      puts
        ldr     r2, .L13+16
        sub     r3, fp, #12
        mov     r0, r2
        mov     r1, r3
        bl      __isoc99_scanf
        ldr     r3, [fp, #-12]
        cmp     r3, #1
        beq     .L3
        cmp     r3, #2
        beq     .L4
        b       .L12
.L3:
        mov     r3, #0
        str     r3, [fp, #-8]
        b       .L5
.L7:
        mvn     r3, #107
        ldr     r2, [fp, #-8]
        sub     r0, fp, #4
        add     r2, r0, r2
        add     r3, r2, r3
        ldrb    r3, [r3, #0]    @ zero_extendqisi2
        add     r3, r3, #3
        and     r2, r3, #255
        mvn     r3, #107
        ldr     r1, [fp, #-8]
        sub     r0, fp, #4
        add     r1, r0, r1
        add     r3, r1, r3
        strb    r2, [r3, #0]
        ldr     r3, [fp, #-8]
        add     r3, r3, #1
        str     r3, [fp, #-8]
.L5:
        ldr     r3, [fp, #-8]
        cmp     r3, #99
        bgt     .L6
        mvn     r3, #107
        ldr     r2, [fp, #-8]
        sub     r1, fp, #4
        add     r2, r1, r2
        add     r3, r2, r3
        ldrb    r3, [r3, #0]    @ zero_extendqisi2
        cmp     r3, #0
        bne     .L7
.L6:
        ldr     r2, .L13+20
        sub     r3, fp, #112
        mov     r0, r2
        mov     r1, r3
        bl      printf
        b       .L8
.L4:
        mov     r3, #0
        str     r3, [fp, #-8]
        b       .L9
.L11:
        mvn     r3, #107
        ldr     r2, [fp, #-8]
        sub     r0, fp, #4
        add     r2, r0, r2
        add     r3, r2, r3
        ldrb    r3, [r3, #0]    @ zero_extendqisi2
        sub     r3, r3, #3
        and     r2, r3, #255
        mvn     r3, #107
        ldr     r1, [fp, #-8]
        sub     r0, fp, #4
        add     r1, r0, r1
        add     r3, r1, r3
        strb    r2, [r3, #0]
        ldr     r3, [fp, #-8]
        add     r3, r3, #1
        str     r3, [fp, #-8]
.L9:
        ldr     r3, [fp, #-8]
        cmp     r3, #99
        bgt     .L10
        mvn     r3, #107
        ldr     r2, [fp, #-8]
        sub     r1, fp, #4
        add     r2, r1, r2
        add     r3, r2, r3
        ldrb    r3, [r3, #0]    @ zero_extendqisi2
        cmp     r3, #0
        bne     .L11
.L10:
        ldr     r2, .L13+24
        sub     r3, fp, #112
        mov     r0, r2
        mov     r1, r3
        bl      printf
        b       .L8
.L12:
        ldr     r0, .L13+28
        bl      puts
.L8:
        mov     r3, #0
        mov     r0, r3
        sub     sp, fp, #4
        ldmfd   sp!, {fp, pc}
.L13:
        .word   .LC0
        .word   .LC1
        .word   .LC2
        .word   .LC3
        .word   .LC4
        .word   .LC5
        .word   .LC6
        .word   .LC7



















